name: Check Installation Scripts

on:
  push:
    paths:
      - 'install/**'
      - 'apps/**'
      - '**.sh'
  pull_request:
    paths:
      - 'install/**'
      - 'apps/**'
      - '**.sh'
  workflow_dispatch:

jobs:
  check-scripts:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        
      - name: Scan Installation Scripts
        id: scan-scripts
        run: |
          echo "# Available Installation Scripts" > scripts_report.md
          echo "" >> scripts_report.md
          echo "Last updated: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> scripts_report.md
          echo "" >> scripts_report.md
          
          # Initialize category arrays
          declare -A categories=()
          
          # Function to detect script type and category
          detect_script_type() {
            local file="$1"
            local base_category="$2"
            
            if grep -q "apt install\|wget\|curl\|docker run\|pip install\|npm install" "$file"; then
              echo "install"
            elif grep -q "apt remove\|apt purge\|apt autoremove\|uninstall\|docker rm" "$file"; then
              echo "uninstall"
            else
              echo "utility"
            fi
          }
          
          # Function to scan directory recursively
          scan_directory() {
            local dir="$1"
            local base_category="$(basename "$dir")"
            
            # Skip .git and node_modules directories
            if [[ "$dir" == *".git"* ]] || [[ "$dir" == *"node_modules"* ]]; then
              return
            fi
            
            # Process all shell scripts in current directory
            for file in "$dir"/*.sh; do
              if [ -f "$file" ]; then
                local filename=$(basename "$file" .sh)
                local category="$base_category"
                local type=$(detect_script_type "$file" "$category")
                
                # Create category key if it doesn't exist
                if [ -z "${categories[$category]}" ]; then
                  categories[$category]=""
                fi
                
                # Add script info to category
                categories[$category]+="$filename:$type "
              fi
            done
            
            # Recursively process subdirectories
            for subdir in "$dir"/*/; do
              if [ -d "$subdir" ]; then
                scan_directory "$subdir"
              fi
            done
          }
          
          # Scan main directories
          for dir in install apps; do
            if [ -d "$dir" ]; then
              scan_directory "$dir"
            fi
          done
          
          # Initialize counters
          total_install=0
          total_uninstall=0
          total_utility=0
          
          # Generate report sections
          for category in "${!categories[@]}"; do
            if [ -n "${categories[$category]}" ]; then
              echo "## Category: $category" >> scripts_report.md
              echo "" >> scripts_report.md
              
              # Arrays for sorting scripts by type
              declare -a install_scripts=()
              declare -a uninstall_scripts=()
              declare -a utility_scripts=()
              
              # Sort scripts by type
              for script_info in ${categories[$category]}; do
                IFS=':' read -r script type <<< "$script_info"
                case "$type" in
                  "install")
                    install_scripts+=("$script")
                    ((total_install++))
                    ;;
                  "uninstall")
                    uninstall_scripts+=("$script")
                    ((total_uninstall++))
                    ;;
                  "utility")
                    utility_scripts+=("$script")
                    ((total_utility++))
                    ;;
                esac
              done
              
              # Print sorted scripts
              if [ ${#install_scripts[@]} -gt 0 ]; then
                echo "### Installation Scripts:" >> scripts_report.md
                for script in "${install_scripts[@]}"; do
                  echo "- $script" >> scripts_report.md
                done
                echo "" >> scripts_report.md
              fi
              
              if [ ${#uninstall_scripts[@]} -gt 0 ]; then
                echo "### Uninstallation Scripts:" >> scripts_report.md
                for script in "${uninstall_scripts[@]}"; do
                  echo "- $script" >> scripts_report.md
                done
                echo "" >> scripts_report.md
              fi
              
              if [ ${#utility_scripts[@]} -gt 0 ]; then
                echo "### Utility Scripts:" >> scripts_report.md
                for script in "${utility_scripts[@]}"; do
                  echo "- $script" >> scripts_report.md
                done
                echo "" >> scripts_report.md
              fi
            fi
          done
          
          # Add summary
          echo "## Summary" >> scripts_report.md
          echo "" >> scripts_report.md
          echo "- Total Installation Scripts: $total_install" >> scripts_report.md
          echo "- Total Uninstallation Scripts: $total_uninstall" >> scripts_report.md
          echo "- Total Utility Scripts: $total_utility" >> scripts_report.md
          
          # Set outputs for badge creation
          echo "install_total=$total_install" >> $GITHUB_OUTPUT
          echo "uninstall_total=$total_uninstall" >> $GITHUB_OUTPUT
          echo "utility_total=$total_utility" >> $GITHUB_OUTPUT
          
          # Create badge JSON files
          echo "{\"schemaVersion\": 1, \"label\": \"install scripts\", \"message\": \"$total_install available\", \"color\": \"blue\"}" > install_badge.json
          echo "{\"schemaVersion\": 1, \"label\": \"uninstall scripts\", \"message\": \"$total_uninstall available\", \"color\": \"red\"}" > uninstall_badge.json
          echo "{\"schemaVersion\": 1, \"label\": \"utility scripts\", \"message\": \"$total_utility available\", \"color\": \"green\"}" > utility_badge.json
          
      - name: Upload Report
        uses: actions/upload-artifact@v3
        with:
          name: scripts-report
          path: scripts_report.md
          
      - name: Upload Badge Data
        uses: actions/upload-artifact@v3
        with:
          name: status-badges
          path: |
            install_badge.json
            uninstall_badge.json
            utility_badge.json
            
      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('scripts_report.md', 'utf8');
            const install_total = Number('${{ steps.scan-scripts.outputs.install_total }}');
            const uninstall_total = Number('${{ steps.scan-scripts.outputs.uninstall_total }}');
            const utility_total = Number('${{ steps.scan-scripts.outputs.utility_total }}');
            
            const body = `## Installation Scripts Status Update
            
            This PR affects the available installation scripts:
            
            - Installation scripts: ${install_total}
            - Uninstallation scripts: ${uninstall_total}
            - Utility scripts: ${utility_total}
            
            ${report}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });