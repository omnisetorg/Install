name: Check Installation Scripts

on:
  push:
    paths:
      - 'install/**'
      - 'apps/**'
      - '**.sh'
  pull_request:
    paths:
      - 'install/**'
      - 'apps/**'
      - '**.sh'
  workflow_dispatch:

jobs:
  check-scripts:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Debug Directory Structure
        run: |
          pwd
          ls -la
          
      - name: Scan Installation Scripts
        id: scan-scripts
        shell: bash
        run: |
          set -x  # Enable debugging
          
          # Create directories
          echo "Creating directories..."
          mkdir -p reports
          mkdir -p .github/badges
          
          # Initialize report file
          echo "Initializing report file..."
          {
            echo "# Available Installation Scripts"
            echo ""
            echo "Last updated: $(date '+%Y-%m-%d %H:%M:%S UTC')"
            echo ""
          } > reports/scripts_report.md || { echo "Failed to create report file"; exit 1; }
          
          # Initialize arrays
          declare -A categories
          
          # Function to detect script type
          detect_script_type() {
            local file="$1"
            if [ ! -f "$file" ]; then
              echo "utility"
              return
            fi
            
            if grep -q "apt install\|wget\|curl\|docker run\|pip install\|npm install" "$file" 2>/dev/null; then
              echo "install"
            elif grep -q "apt remove\|apt purge\|apt autoremove\|uninstall\|docker rm" "$file" 2>/dev/null; then
              echo "uninstall"
            else
              echo "utility"
            fi
          }
          
          # Initialize counters
          total_install=0
          total_uninstall=0
          total_utility=0
          
          # Scan directories
          echo "Scanning directories..."
          for dir in install apps; do
            if [ -d "$dir" ]; then
              echo "Processing directory: $dir"
              for script in $(find "$dir" -type f -name "*.sh"); do
                echo "Found script: $script"
                filename=$(basename "$script" .sh)
                category=$(dirname "$script" | sed 's/\.\///')
                type=$(detect_script_type "$script")
                
                echo "Processing $filename ($type) in $category"
                
                case "$type" in
                  "install")
                    ((total_install++))
                    ;;
                  "uninstall")
                    ((total_uninstall++))
                    ;;
                  "utility")
                    ((total_utility++))
                    ;;
                esac
                
                # Add to category
                if [ -z "${categories[$category]}" ]; then
                  categories[$category]=""
                fi
                categories[$category]+="$filename:$type "
              done
            else
              echo "Directory $dir not found"
            fi
          done
          
          # Generate report
          echo "Generating report..."
          {
            echo "## Summary"
            echo ""
            echo "- Total Installation Scripts: $total_install"
            echo "- Total Uninstallation Scripts: $total_uninstall"
            echo "- Total Utility Scripts: $total_utility"
            echo ""
            
            for category in "${!categories[@]}"; do
              echo "## Category: $category"
              echo ""
              
              declare -a install_scripts=()
              declare -a uninstall_scripts=()
              declare -a utility_scripts=()
              
              for script_info in ${categories[$category]}; do
                IFS=':' read -r script type <<< "$script_info"
                case "$type" in
                  "install") install_scripts+=("$script") ;;
                  "uninstall") uninstall_scripts+=("$script") ;;
                  "utility") utility_scripts+=("$script") ;;
                esac
              done
              
              if [ ${#install_scripts[@]} -gt 0 ]; then
                echo "### Installation Scripts:"
                for script in "${install_scripts[@]}"; do
                  echo "- $script"
                done
                echo ""
              fi
              
              if [ ${#uninstall_scripts[@]} -gt 0 ]; then
                echo "### Uninstallation Scripts:"
                for script in "${uninstall_scripts[@]}"; do
                  echo "- $script"
                done
                echo ""
              fi
              
              if [ ${#utility_scripts[@]} -gt 0 ]; then
                echo "### Utility Scripts:"
                for script in "${utility_scripts[@]}"; do
                  echo "- $script"
                done
                echo ""
              fi
            done
          } >> reports/scripts_report.md || { echo "Failed to update report file"; exit 1; }
          
          # Create badge files
          echo "Creating badge files..."
          echo "{\"schemaVersion\": 1, \"label\": \"install scripts\", \"message\": \"$total_install available\", \"color\": \"blue\"}" > .github/badges/install_badge.json || { echo "Failed to create install badge"; exit 1; }
          echo "{\"schemaVersion\": 1, \"label\": \"uninstall scripts\", \"message\": \"$total_uninstall available\", \"color\": \"red\"}" > .github/badges/uninstall_badge.json || { echo "Failed to create uninstall badge"; exit 1; }
          echo "{\"schemaVersion\": 1, \"label\": \"utility scripts\", \"message\": \"$total_utility available\", \"color\": \"green\"}" > .github/badges/utility_badge.json || { echo "Failed to create utility badge"; exit 1; }
          
          # Set outputs
          echo "Setting outputs..."
          {
            echo "install_total=$total_install"
            echo "uninstall_total=$total_uninstall"
            echo "utility_total=$total_utility"
          } >> $GITHUB_OUTPUT
          
          echo "Script completed successfully"
          
      - name: Upload Report
        uses: actions/upload-artifact@v3
        with:
          name: scripts-report
          path: reports/scripts_report.md
          
      - name: Upload Badge Data
        uses: actions/upload-artifact@v3
        with:
          name: status-badges
          path: .github/badges/*.json
            
      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('reports/scripts_report.md', 'utf8');
            const install_total = Number('${{ steps.scan-scripts.outputs.install_total }}');
            const uninstall_total = Number('${{ steps.scan-scripts.outputs.uninstall_total }}');
            const utility_total = Number('${{ steps.scan-scripts.outputs.utility_total }}');
            
            const body = `## Installation Scripts Status Update
            
            This PR affects the available installation scripts:
            
            - Installation scripts: ${install_total}
            - Uninstallation scripts: ${uninstall_total}
            - Utility scripts: ${utility_total}
            
            ${report}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });